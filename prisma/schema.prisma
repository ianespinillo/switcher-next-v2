// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          String
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  Subscription  Subscription? 

  @@map("users")
}

model Subscription {
  Id          String    @id @default(uuid())
  level       Int       @default(0)
  expire_Date DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([sessionToken], name: "session_token")
  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Productos 

model Confederation {
  id          String    @id @unique @default(uuid())
  img_url     String
  confed_name String
  confed_3    String
  Country     Country[]
}

model Country {
  id                   String        @id @unique @default(uuid())
  name                 String
  country_3            String
  country_img_url      String
  country_not_name_img String
  confederation        Confederation @relation(fields: [confederation_id], references: [id], onDelete: Cascade)
  confederation_id     String
  Product              Product[]
}

model Product {
  id              String            @id @unique @default(uuid())
  name            String
  name_3          String
  preview_url     String
  price           Decimal
  type            String
  description     String
  logo_url        String
  big_url         String
  fifaproject_url String?
  country         Country           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId       String
  Payement_detail Payement_detail[]
  Version         Version?          @relation(fields: [versionId], references: [id], onDelete: SetNull)
  versionId       String?           
}

model Payement {
  id              Int               @id @default(autoincrement())
  method          String
  user_email      String
  date            DateTime
  state           Boolean
  amount          Float
  Payement_detail Payement_detail[]
}

model Payement_detail {
  id         Int      @id @default(autoincrement())
  quantity   Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  payement   Payement @relation(fields: [payementId], references: [id])
  payementId Int
}

model Version {
  id             String    @id @default(uuid())
  version_number String
  free_release   DateTime
  competitions   Product[]
}
